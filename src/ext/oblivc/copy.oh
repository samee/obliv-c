#pragma once

#include<stddef.h>
#include<obliv_copy_internal.h>
#include<obliv_common.h>

// These are effectively obliv assignment operators
typedef frozen struct OcCopy OcCopy;

typedef void (*ocopy_cb)(const OcCopy*,
    frozen void*,frozen const void*,size_t) obliv;
typedef void (*ocopy_cond_cb)(const OcCopy*,
    void*,const void*,const obliv bool*,size_t) obliv;

struct OcCopy 
{ ocopy_cb go; // Guaranteed to work in non-obliv scopes even on
               // uninitialized destinations.
  ocopy_cond_cb goN; 
  void (*release)(OcCopy*);
  size_t eltsize; 

  // "Free" utilities
  void (*zeroFill)(const OcCopy*,void*,size_t);
  void (*addN)(const OcCopy*,void*,const void*,size_t);
  void (*subN)(const OcCopy*,void*,const void*,size_t);
};

static inline void ocShareDuplicate(void * dest, const void * src, size_t n) {
      memcpy(dest, src, n);
} 

static inline void ocShareXor(void * dest, const void * src, size_t n) {
      memxor(dest, src, n);
}

static inline void ocCopyN
  (const OcCopy* c,frozen void* dest,frozen const void* src,size_t n) obliv
  { c->go(c,dest,src,n); }

static inline void ocCopy
  (const OcCopy* c,frozen void* dest,frozen const void* src) obliv
  { ocCopyN(c,dest,src,1); }

static inline void ocCopyCondN
  (const OcCopy* c,void* dest,const void* src,
   const obliv bool* cond,size_t n) obliv
  { c->goN(c,dest,src,cond,n); }

void ocSwap(OcCopy* cpy,void* opt0,void* opt1,void* scratch) obliv;
void ocSwapCondN(OcCopy* cpy,void* opt0,void* opt1,void* scratch,
                 const obliv bool c[],size_t n) obliv;

static inline void ocCopyRelease(OcCopy* c)
  { c->release(c); }

static inline void ocCopyZeroFill(OcCopy* c,void* dest,size_t n)
  { c->zeroFill(c,dest,n); }

static inline void ocCopyAddN(OcCopy* c,void* dest,const void* src,size_t n)
  { c->addN(c,dest,src,n); }
static inline void ocCopySubN(OcCopy* c,void* dest,const void* src,size_t n)
  { c->subN(c,dest,src,n); }

static inline void* ocCopyElt(OcCopy* cpy,void* arr,int x) obliv
  { return x*cpy->eltsize+(char*)arr; }

extern const OcCopy ocCopyBool, ocCopyChar, ocCopyShort, ocCopyInt, ocCopyLong,
                    ocCopyLLong, ocCopySizeT;

/* ------------------- Shared, packed representations ------------------------
   Used only with honest-but-curious Yao's protocol.
   ---------------------------------------------------------------------------
   Produces a "packed and shared" representation of values, which can
   be copied around and multiplexed very efficiently in bandwidth. However,
   they introduce round-trip latencies, so you are encouraged to use the 
   ocCopyN and ocCopyCondN functions on these which copy many values in
   one go. At least currently, they cannot be used for any arithmetic,
   so you have to switch back-and-forth between this and ordinary obliv types
   if you want to do that.

   And yes, there is no OcSharedBool type. Use ordinary obliv bool instead.
   Also, current implementation doesn't do anything fast for known values,
   so you should really only use it for unknowns.
   ---------------------------------------------------------------------------
*/

typedef char OcSharedChar [ocBitSize(obliv char     )/8];
typedef char OcSharedShort[ocBitSize(obliv short    )/8];
typedef char OcSharedInt  [ocBitSize(obliv int      )/8];
typedef char OcSharedLong [ocBitSize(obliv long     )/8];
typedef char OcSharedLLong[ocBitSize(obliv long long)/8];

void ocFromShared_impl(ProtocolDesc* pd,
                       void* dest,const void* src,size_t n,
                       size_t bits,size_t bytes);
// These functions should probably check if ocCurrentProtocol is Yao's
#define OC_SHARED_CONVERT(t,T) \
  void \
  ocToShared##T##N \
  ( ProtocolDesc* pd, \
    OcShared##T dest[],obliv t src[],\
    size_t n); \
  static inline void \
  ocFromShared##T##N \
  ( ProtocolDesc* pd, \
    obliv t dest[],OcShared##T src[],size_t n\
  )\
  { ocFromShared_impl(pd,dest,src,n,ocBitSize(obliv t),sizeof(obliv t)); }\
  static inline void \
  ocToShared##T \
  ( ProtocolDesc* pd, \
    OcShared##T* dest,obliv t src) \
    { ocToShared##T##N(pd,dest,&src,1); } \
  static inline obliv t \
  ocFromShared##T (ProtocolDesc* pd,OcShared##T* src) obliv \
  { obliv t r; \
    ~obliv() ocFromShared##T##N(pd,&r,src,1); \
    return r; \
  }\
  void\
  ocFeedShared##T##N (OcShared##T dest[],const t src[], \
                      size_t n,int party); \
  void\
  ocRevealShared##T##N (t dest[], const OcShared##T src[], \
                        size_t n,int party);

OC_SHARED_CONVERT(char, Char )
OC_SHARED_CONVERT(short,Short)
OC_SHARED_CONVERT(int,  Int  )
OC_SHARED_CONVERT(long, Long )
OC_SHARED_CONVERT(long long, LLong)
#undef OC_SHARED_CONVERT

extern OcCopy ocCopySharedChar, ocCopySharedShort, ocCopySharedInt,
              ocCopySharedLong, ocCopySharedLLong;
OcCopy ocCopyBoolN (size_t lim);
OcCopy ocCopyCharN (size_t lim);
OcCopy ocCopyShortN(size_t lim);
OcCopy ocCopyIntN  (size_t lim);
OcCopy ocCopyLLongN(size_t lim);

OcCopy* ocShareCopyNew(ProtocolDesc* pd,size_t n,size_t eltsize);
void ocShareCopyRelease(OcCopy* c);
void ocShareInit(ProtocolDesc* pd);
void ocShareCleanup(ProtocolDesc* pd);
