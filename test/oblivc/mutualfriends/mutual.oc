//mutualfriends file

#include<stdio.h>
#include<stdlib.h>
#include<obliv.oh>

#include "mutual.h"

typedef obliv bool obool;

typedef obliv int oint;

int greatestPowerOfTwoLessThan(int n){
  int k = 1;
  while(k < n)
    k=k*2;
  return k / 2;
}

oint oblivStrCmp(obliv char* s1, obliv char* s2) obliv {
  obliv bool afternull = false;
  int i;
  oint ob = 0;
  for( i = 0; i < MAXL; i++) {
    obliv if (afternull) {
      ;
    } else {
      obliv char c1 = s1[i];
      obliv char c2 = s2[i];
      obliv if (c1 != c2) {
	  ob = c1 - c2;
	  afternull = true;
	}
       else
	obliv if (c1 == '\0') 
	  afternull = true;
    }
  }	
  return ob;    
}

void addString(obliv char* src, obliv char* dest) obliv{
     int i;
     for(i=0; i<MAXL; i++)
        dest[i]=src[i];
}

void swap(obliv char list[2*MAXN][MAXL], int i, int j) obliv{
    obliv char temp[MAXL];
    addString(list[i], temp);
    addString(list[j], list[i]);
    addString(temp, list[j]);
}

void readString(obliv char* dest, int n, const char* src,int party)
{
  OblivInputs specs[MAXN];
  int i;
  feedOblivInputs(specs,n,party);
}

void mutualFriends(void* args){
  protocolIO *io = args;
  int size1, size2;
  int i, j;
  obliv char friends1[MAXN][MAXL]; 
  obliv char friends2[MAXN][MAXL];
  obliv char commonFriends[MAXN][MAXL];
  obliv int commonSize;
  size1 = ocBroadcastInt(1, io->size);
  size2 = ocBroadcastInt(2, io->size);
  for(i=0;i<size1;i++)
    for( j=0;j<MAXL;j++)
      friends1[i][j] = feedOblivChar(io->mine[i][j], 1);
 
  for(i=0; i<size2; i++)
    for(j=0; j<MAXL; j++)
      friends2[i][j] = feedOblivChar(io->mine[i][j], 2);
     
  for( i=0; i<size1;i++){
    for(j=0; j<size2;j++){
	obliv if(oblivStrCmp(friends1[i], friends2[j])==0){
	  commonSize++;
	  addString(friends1[i], commonFriends[i]);
	}
    }}
  revealOblivInt(&io->commonSize, commonSize, 0);
  for(i=0; i<MAXN; i++)
    for(j=0; j<MAXL; j++)
      revealOblivChar(&io->common[i][j],commonFriends[i][j],0); 
  } 


void sortMutual(void* args){
  protocolIO *io = args;
  int size1, size2;
  int i, j;
  size1 = ocBroadcastInt(1, io->size);
  size2 = ocBroadcastInt(2, io->size);
  obliv char friends[2 * MAXN][MAXL]; 
  obliv char commonFriends[2 * MAXN][MAXL];
  obliv int commonSize;

  for(i=0;i<size1;i++){
    for( j=0;j<MAXL;j++){
      friends[size1 -1 -i][j] = feedOblivChar(io->mine[i][j], 1);
    }
  }
  for(i=0; i < size2; i++)
    for(j=0; j<MAXL; j++)
      friends[size1 + i][j] = feedOblivChar(io->mine[i][j], 2);
  int totalSize = size1 + size2;
  int k = greatestPowerOfTwoLessThan(totalSize);
  while(k>0){
    for(i=0; i+k<totalSize; i++)
      if((i/k)%2 == 0)
  	obliv if(oblivStrCmp(friends[i], friends[i+k])>0)
  	  swap(friends, i, i+k);
    k = greatestPowerOfTwoLessThan(k);
  }

  for(i = 0; i < totalSize-1; i++){
    obliv if(oblivStrCmp(friends[i], friends[i + 1])==0){
	commonSize++;
	addString(friends[i+1], commonFriends[i+1]);
      }
  }

  //shuffling
  srand(time(NULL));
  int r1, r2;
  for(i = 0; i<2*MAXN; i++){
    r1 = rand() % 2*MAXN;
    r2 = rand() % 2*MAXN;
    swap(commonFriends, r1, r2);
  }
  revealOblivInt(&io->commonSize, commonSize, 0);
  for(i=0; i<2*MAXN; i++)
    for(j=0; j<MAXL; j++)
      revealOblivChar(&io->common[i][j],commonFriends[i][j],0); 
}
